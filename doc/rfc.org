#+TITLE: Contentlib

* Protocol Flows

** Exchange Authorization

A peer uses an exchange for receiving messages.  They could indicate
which exchange(s) they use in a well-known file in their remoteStorage
account.  Other peers send messages to an exchange the peer uses (with
a yet to be determined protocol), and the peer later retrieves them
from the exchange.

For retrieving messages addressed to an account from an exchange, the
peer's user agent needs an authorization token.  For getting an
authorization token, it needs to prove to the exchange that it owns
the remoteStorage location identified by the account.

*** UA->EX: Get Challenge Token From Server

=POST http://exchange.example.net/challenge-token?acct=foo@example.com=

With this request, the user agent indicates that it wants a challenge
token, thereby starting the authorization process.

*** EX->UA: Return Challenge Token

=bcf06fc78eb83da8bd8ac4f4aa20874d7bac5231=

The exchange returns the challenge token, an opaque string, to the
user agent, which it needs to store on the account's remoteStorage.

The exchange temporarily remembers the account and challenge token.

*** UA->SS: Store Challenge Token on Storage Server

=PUT http://example.com/~foo/challenge-tokens/69405782bacf0a1ecb5121973db58794db77dffd=

PUT content: =hash(bcf06fc78eb83da8bd8ac4f4aa20874d7bac5231)=

The user agent stores the challenge token on a location with a fresh
random name on the storage server.

The challenge token is one-way hashed, so that an attacker with read
access to the file cannot prove ownership to the exchange.

*** UA->EX: Prove Ownership of Storage Server

#+BEGIN_EXAMPLE
POST http://exchange.example.net/prove-ownership
       ?acct=foo@example.com
       &challenge=bcf06fc78eb83da8bd8ac4f4aa20874d7bac5231
       &location=/challenge-tokens/69405782bacf0a1ecb5121973db58794db77dffd
#+END_EXAMPLE

To prove ownership of the storage server, the user agent sends to the
exchange the account, the challenge token, and the location where it
has stored the hashed challenge token.

*** EX->UA: Return Authorization Token

=246f2841c18cd54de2809197da73c2e5fc6b965d=

The exchange checks that it has recently given out this challenge
token for this account, and fetches the hashed challenge token from
the peer-indicated location on the account, verifying that the hash
matches the challenge token.  If these conditions are true, it returns
the authorization token to the peer, giving it access to messages on
the exchange sent to it.
